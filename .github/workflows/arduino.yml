name: Build Arduino
on:
  workflow_dispatch:
    branches: [ ESP32, ESP8266 ]
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Iniciar a geração firmware'
        # Default value if no value is explicitly provided
        default: 'Iniciar'
        # Input has to be provided for the workflow to run
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board:
        - esp32:esp32:esp32thing
        iot-minion:
        - arduino/iot-minion
    env:
      ARDUINO_LIBRARY_ENABLE_UNSAFE_INSTALL: true
      FIREBASE_API_KEY: ${{secrets.FIREBASE_API_KEY}}
      FIREBASE_USER_EMAIL: ${{secrets.FIREBASE_USER_EMAIL}}
      FIREBASE_USER_PASSWORD: ${{secrets.FIREBASE_USER_PASSWORD}}
      FIREBASE_STORAGE_BUCKET_ID: ${{secrets.FIREBASE_STORAGE_BUCKET_ID}}
      API_TEXT2SPEECH_KEY: ${{secrets.API_TEXT2SPEECH_KEY}}
      API_MINION_TOKEN: ${{secrets.API_MINION_TOKEN}}
      WIFI_SSID: ${{secrets.WIFI_SSID}}
      WIFI_PASSWORD: ${{secrets.WIFI_PASSWORD}}
      USER_FIRMWARE: ${{secrets.USER_FIRMWARE}}
      PASS_FIRMWARE: ${{secrets.PASS_FIRMWARE}}
      AIO_USERNAME: ${{secrets.AIO_USERNAME}}
      AIO_KEY: ${{secrets.AIO_KEY}}
      App_Packages_Archive: iot-minion
      Version: 1.0.${{ github.run_number }}
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands
      BUILD_OUT_DIR: sonarcloud/arduino/build_wrapper_output_directory
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
   
    - name: Cache Arduino CLI
      uses: actions/cache@v2
      with:
        path: ~/.arduino15
        key: ${{ runner.os }}-${{ hashFiles('*_index.json') }}
      
    - name: Setup Arduino CLI
      uses: arduino/setup-arduino-cli@v1.1.1

    - name: Install pyserial
      run: |
        python -m pip install --upgrade pip
        pip install pyserial       

    - name: Install Arduino platforms and libraries
      run: |   
        arduino-cli core update-index
        arduino-cli core update-index --additional-urls "https://dl.espressif.com/dl/package_esp32_index.json"
        arduino-cli core install "esp32:esp32" --additional-urls "https://dl.espressif.com/dl/package_esp32_index.json"
        arduino-cli lib install "ArduinoWebsockets"
        arduino-cli lib install "Adafruit FONA Library"
        arduino-cli lib install "Adafruit MQTT Library"
        arduino-cli lib install "Adafruit SleepyDog Library"
        arduino-cli lib install "Adafruit Unified Sensor"
        arduino-cli lib install "ArduinoJson"
        arduino-cli lib install "AsyncElegantOTA"
        arduino-cli lib install --git-url https://github.com/WeekendWarrior1/XTronical_XT_DAC_Audio_Mirror.git https://github.com/me-no-dev/ESPAsyncWebServer.git https://github.com/me-no-dev/AsyncTCP.git
        arduino-cli lib install "DHT sensor library"
        arduino-cli lib install "NTPClient"
        arduino-cli lib install "PubSubClient"
        arduino-cli lib install "WiFi101"
        arduino-cli lib install "Firebase Arduino Client Library for ESP8266 and ESP32"
        arduino-cli config dump

    - name: Change WiFi SSID
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <WIFI_SSID>
        replace: ${{ env.WIFI_SSID }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change WiFi Password
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <WIFI_PASSWORD>
        replace: ${{ env.WIFI_PASSWORD }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Firmware Username
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <USER_FIRMWARE>
        replace: ${{ env.USER_FIRMWARE }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Firmware Password
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <PASS_FIRMWARE>
        replace: ${{ env.PASS_FIRMWARE }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Adafruit Username
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <AIO_USERNAME>
        replace: ${{ env.AIO_USERNAME }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Adafruit Key
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <AIO_KEY>
        replace: ${{ env.AIO_KEY }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Api Text2Speech Key
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <API_TEXT2SPEECH_KEY>
        replace: ${{ env.API_TEXT2SPEECH_KEY }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Api Minion Token Key
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <API_MINION_TOKEN>
        replace: ${{ env.API_MINION_TOKEN }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change firmware version
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <API_VERSION>
        replace: ${{ env.Version }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Firebase API Key
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <FIREBASE_API_KEY>
        replace: ${{ env.FIREBASE_API_KEY }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Firebase user email
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <FIREBASE_USER_EMAIL>
        replace: ${{ env.FIREBASE_USER_EMAIL }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Firebase user password
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <FIREBASE_USER_PASSWORD>
        replace: ${{ env.FIREBASE_USER_PASSWORD }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change Firebase Storage Bucket Id
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <FIREBASE_STORAGE_BUCKET_ID>
        replace: ${{ env.FIREBASE_STORAGE_BUCKET_ID }}
        include: "${{ env.App_Packages_Archive }}/Credentials.h"

    - name: Change sonarcloud version
      uses: jacobtomlinson/gha-find-replace@master
      with:
        find: <VERSION>
        replace: ${{ env.Version }}
        include: "sonarcloud/arduino/sonar-project.properties"

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

    - name: Build-wrapper ${{ matrix.iot-minion }} ${{ matrix.board }}
      run: |
        arduino-cli cache clean
        bash sonarcloud/arduino/build.sh ${{ matrix.board }} ${{ matrix.iot-minion }} ${{ env.BUILD_OUT_DIR }}
        docker run -v $(pwd):$(pwd) -t mgos/esp32-build:4.2-r2 mkspiffs -b 4096 -p 256 -s 0x100000 $(pwd)/${{ matrix.iot-minion }}/data -f $(pwd)/${{ env.BUILD_OUT_DIR }}/${{ env.App_Packages_Archive }}-v${{env.Version}}-fs.bin
        mv ${{ env.BUILD_OUT_DIR }}/${{ env.App_Packages_Archive }}.ino.bin ${{ env.BUILD_OUT_DIR }}/${{ env.App_Packages_Archive }}-v${{env.Version}}.bin

    - name: Find build-wrapper-dump.json
      run: |
        find . --name build-wrapper-dump.json

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
          projectBaseDir: .
          args: >
            -Dproject.settings=sonarcloud/arduino/sonar-project.properties
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
    # Archive the package
    - name: Create archive
      uses: coco-hkk/compress-action@v2.1
      id: step1
      with:
        file-suffix: 'bin'
        target-directory-path: ${{ env.BUILD_OUT_DIR }}
        compress-tool: 'gzip'

    - name: Get archive
      run: |
        if [ "0"x != "${{ steps.step1.outputs.state }}"x ]; then
          echo "archive create failed, exit"
        else
          mv ${{ steps.step1.outputs.archive }} ${{ env.App_Packages_Archive }}-v${{env.Version}}.gz
          tar -tzvf ${{ env.App_Packages_Archive }}-v${{env.Version}}.gz
        fi

    # Create the release:  https://github.com/actions/create-release
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ env.Version }}
        release_name: minion-esp32-v${{ env.Version }}
        draft: false
        prerelease: false

    # Upload release asset:   https://github.com/actions/upload-release-asset
    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{ env.App_Packages_Archive }}-v${{env.Version}}.gz
        asset_name: ${{ env.App_Packages_Archive }}-v${{env.Version}}.gz
        asset_content_type: application/gzip
